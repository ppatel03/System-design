Design A Unique ID Generator In Distributed Systems
https://bytebytego.com/courses/system-design-interview/design-a-unique-id-generator-in-distributed-systems

Above are some of the sample questions that you can ask your interviewer. It is important to understand the requirements and clarify ambiguities. For this interview question, the requirements are listed as follows:

    IDs must be unique.

    IDs are numerical values only.

    IDs fit into 64-bit.

    IDs are ordered by date.

    Ability to generate over 10,000 unique IDs per second.


Step 2 - Propose high-level design and get buy-in

    Multi-master replication

        This approach uses the databases’ auto_increment feature. Instead of increasing the next ID by 1, we increase it by k, where k is the number of database servers in use.

        However, this strategy has some major drawbacks:

            Hard to scale with multiple data centers

            IDs do not go up with time across multiple servers.

            It does not scale well when a server is added or removed.

    UUID 

        A UUID is another easy way to obtain unique IDs. UUID is a 128-bit number used to identify information in computer systems. UUID has a very low probability of getting collusion. Quoted from Wikipedia, “after generating 1 billion UUIDs every second for approximately 100 years would the probability of creating a single duplicate reach 50%” [1].

        Pros:

            Generating UUID is simple. No coordination between servers is needed so there will not be any synchronization issues.

            The system is easy to scale because each web server is responsible for generating IDs they consume. ID generator can easily scale with web servers.

        Cons:

            IDs are 128 bits long, but our requirement is 64 bits.

            IDs do not go up with time.

            IDs could be non-numeric.

    Ticket Server
        Ticket servers are another interesting way to generate unique IDs. Flicker developed ticket servers to generate distributed primary keys [2].
        The idea is to use a centralized auto_increment feature in a single database server (Ticket Server). To learn more about this, refer to flicker’s engineering blog article [2].

        Pros:

            Numeric IDs.

            It is easy to implement, and it works for small to medium-scale applications.

        Cons:

            Single point of failure.

    Twitter snowflake approach
        Approaches mentioned above give us some ideas about how different ID generation systems work. However, none of them meet our specific requirements; thus, we need another approach. Twitter’s unique ID generation system called “snowflake” [3] is inspiring and can satisfy our requirements.

        Each section is explained below.

            Sign bit: 1 bit. It will always be 0. This is reserved for future uses. It can potentially be used to distinguish between signed and unsigned numbers.

            Timestamp: 41 bits. Milliseconds since the epoch or custom epoch. We use Twitter snowflake default epoch 1288834974657, equivalent to Nov 04, 2010, 01:42:54 UTC.

            Datacenter ID: 5 bits, which gives us 2 ^ 5 = 32 datacenters.

            Machine ID: 5 bits, which gives us 2 ^ 5 = 32 machines per datacenter.

            Sequence number: 12 bits. For every ID generated on that machine/process, the sequence number is incremented by 1. The number is reset to 0 every millisecond.

Step 3 - Design deep dive

    We settle on an approach that is based on the Twitter snowflake ID generator.

    Datacenter IDs and machine IDs are chosen at the startup time, generally fixed once the system is up running.

    Timestamp

        The most important 41 bits make up the timestamp section. As timestamps grow with time, IDs are sortable by time. 
        The maximum timestamp that can be represented in 41 bits is

        2 ^ 41 - 1 = 2199023255551 milliseconds (ms), which gives us: ~ 69 years = 2199023255551 ms / 1000 / 365 days / 24 hours/ 3600 seconds. This means the ID generator will work for 69 years 

    Sequence number

        Sequence number is 12 bits, which give us 2 ^ 12 = 4096 combinations. This field is 0 unless more than one ID is generated in a millisecond on the same server. In theory, a machine can support a maximum of 4096 new IDs per millisecond.


Step 4 - Wrap up

    Clock synchronization. In our design, we assume ID generation servers have the same clock. This assumption might not be true when a server is running on multiple cores. The same challenge exists in multi-machine scenarios. Solutions to clock synchronization are out of the scope of this course; however, it is important to understand the problem exists. Network Time Protocol is the most popular solution to this problem. For interested readers, refer to the reference material [4].

TODO

    Refer NTP 





