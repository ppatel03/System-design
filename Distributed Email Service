Distributed Email Service
      https://bytebytego.com/courses/system-design-interview/distributed-email-service

        Back-of-the-envelope estimation
            
            Assume metadata is stored in a database. Storage requirement for maintaining metadata in 1 year: 1 billion users * 40 (avg) emails / day * 365 days * 50 KB = 730 PB.
            Assume 20% of emails contain an attachment and the average attachment size is 500 KB.
            Storage for attachments in 1 year is: 1 billion users * 40 emails / day * 365 days * 20% * 500 KB = 1,460 PB

            From this back-of-the-envelope calculation, it’s clear we would deal with a lot of data. So, it’s likely that we need a distributed database solution.


        Step 2 - Propose High-Level Design and Get Buy-In
            Email knowledge 101
              Email protocols
              Domain name service (DNS)
              Attachment
            Traditional mail servers
              Traditional mail server architecture
                  Alice logs in to her Outlook client, composes an email, and presses the “send” button. The email is sent to the Outlook mail server. The communication protocol between the Outlook client and the mail server is SMTP.

                  Outlook mail server queries the DNS (not shown in the diagram) to find the address of the recipient’s SMTP server. In this case, it is Gmail’s SMTP server. Next, it transfers the email to the Gmail mail server. The communication protocol between the mail servers is SMTP.

                  The Gmail server stores the email and makes it available to Bob, the recipient.

                  Gmail client fetches new emails through the IMAP/POP server when Bob logs in to Gmail.

              Storage
                  In a traditional mail server, emails were stored in local file directories and each email was stored in a separate file with a unique name.
                  As the email volume grew and the file structure became more complex, disk I/O became a bottleneck. The local directories also don’t satisfy our high availability and reliability requirements.


            Distributed mail servers
                Email APIs
                  Due to the length limitations of this book, we cover only some of the most important APIs for webmail. A common way for webmail to communicate is through the HTTP protocol.

                  1. Endpoint: POST /v1/messages
                  2. Endpoint: GET /v1/folders
                  3. Endpoint: GET /v1/folders/{:folder_id}/messages
                  4. Endpoint: GET /v1/messages/{:message_id}

                Distributed mail server architecture
                  While it is easy to set up an email server that handles a small number of users, it is difficult to scale beyond one server. This is mainly because traditional email servers were designed to work with a single server only.


        TODO : 
            learn about Email protocols : SMTP for sending, POP and IMAP for retreiving