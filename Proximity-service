Proximity Service 
    https://bytebytego.com/courses/system-design-interview/proximity-service

Non-functional requirements
    From the business requirements, we can infer a list of non-functional requirements. You should also check these with the interviewer.

            Low latency. Users should be able to see nearby businesses quickly.

            Data privacy. Location info is sensitive data. When we design a location-based service (LBS), we should always take user privacy into consideration. We need to comply with data privacy laws like General Data Protection Regulation (GDPR) [4] and California Consumer Privacy Act (CCPA) [5], etc.

            High availability and scalability requirements. We should ensure our system can handle the spike in traffic during peak hours in densely populated areas.

Algorithms to fetch nearby businesses
        In real life, companies might use existing geospatial databases such as Geohash in Redis [10] or Postgres with PostGIS extension [11]. You are not expected to know the internals of those geospatial databases during an interview. Itâ€™s better to demonstrate your problem-solving skills and technical knowledge by explaining how the geospatial index works, rather than to simply throw out database names.
    
        Different types of address look up
        two dimensional search query, Evenly divided grid, Geohash, Quadtree








tODO : 
        High level storage based on read : write ratio
          If Read ratio is high than writes, remember to apply master/slave architecture for storage  replica for reads and master/primary for write 

        Sharding and Replicating 
          These are two different concepts and usually you need both. Sharding is very common though.
          However, if your DB requirements are not huge (say 10 GB), you can simply create replicas to distribute read load than sharding it

        Operation complexity with in-memory data
          - If your in-memory data is large (in GBs), then it takes time to start up and serve traffic. Needs gradual roll out of new releases or 
          blue green deployment technique (https://martinfowler.com/bliki/BlueGreenDeployment.html)
          - Locking mechanism is needed for updates in a multithread environment
      
      